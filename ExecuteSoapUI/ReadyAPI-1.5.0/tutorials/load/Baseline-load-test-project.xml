<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default environment" name="Baseline Load Sample Project" resourceRoot="" soapui-version="6.0.0" id="50260edc-b2e0-49c3-9e2a-76fbd9efa6ad" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
    <con:description>Simulates three virtual users working with a local virtual service concurrently. Start 'Google Maps' virt manually before running the test.</con:description><con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.LoadTestRunnerAction@values-local"><![CDATA[
            <xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Geocode"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\Ready!API-1.0.0-SNAPSHOT/bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="LoadTest" value="LoadTest 1"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Print Report Statistics" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="Capital cities"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="ThreadCount" value=""/>
  <con:entry key="Limit" value=""/>
</xml-fragment>]]></con:setting>
    </con:settings>
    <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Google Maps" type="rest" id="a4404eb6-6578-4bc4-a794-4cdc277f30f1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:settings/>


        
        <con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
            <con:endpoint>http://maps.googleapis.com</con:endpoint>
        </con:endpoints>
        <con:resource name="Geocode (XML)" path="/maps/api/geocode/xml" id="343e5bcd-7e62-4bb5-81f6-d28c0951dfe3">
            <con:settings/>
            <con:parameters>
                <con:parameter>
                    <con:name>address</con:name>
                    <con:value/>
                    <con:style>QUERY</con:style>
                    <con:default/>
                    <con:description xsi:nil="true"/>
                </con:parameter>
                <con:parameter>
                    <con:name>sensor</con:name>
                    <con:value/>
                    <con:style>QUERY</con:style>
                    <con:default/>
                    <con:description xsi:nil="true"/>
                </con:parameter>
            </con:parameters>
            <con:method name="Search" method="GET" id="5ff41ee5-bc72-4b91-a95d-59bca3c7ff2d">
                <con:settings/>
                <con:parameters/>
                <con:representation type="RESPONSE">
                    <con:mediaType>application/xml; charset=UTF-8</con:mediaType>
                    <con:status>200</con:status>
                    <con:params/>
                    <con:element>GeocodeResponse</con:element>
                </con:representation>
                <con:request name="Geocode search" mediaType="application/json" id="02e45f7b-74ca-4a03-b0b2-9e8155bcd90f">
                    <con:settings>
                        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
                        </con:setting>
                    </con:settings>
                    <con:endpoint>http://maps.googleapis.com</con:endpoint>
                    <con:request/>
                    <con:originalUri>http://maps.googleapis.com/maps/api/geocode/xml</con:originalUri>
                    <con:credentials>
                        <con:authType>No Authorization</con:authType>
                    </con:credentials>
                    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                    <con:jmsPropertyConfig/>
                    <con:parameters>
                        <entry key="sensor" value="false" xmlns="http://eviware.com/soapui/config"/>
                    </con:parameters>
                    <con:parameterOrder>
                        <con:entry>address</con:entry>
                        <con:entry>sensor</con:entry>
                    </con:parameterOrder>
                </con:request>
            </con:method>
        </con:resource>
    </con:interface>
    <con:testSuite name="Geocode" id="81695b59-d228-4d7c-abbc-c691db14ad84">
        <con:settings/>
        <con:runType>SEQUENTIAL</con:runType>
        <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Capital cities" searchProperties="true" id="13fd4c87-d2d0-4b4f-a7f4-629c290cd19a">
            <con:settings/>
            
            
            <con:testStep type="datasource" name="DataSource" id="08b01eeb-4d4d-4a8b-a0b6-9aba678111ef">
                <con:settings/>
                <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:dataSource type="Grid">
                        <con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">Beijing&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">Tokyo&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">Moscow&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">Seoul&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">Jakarta&lt;/con:entry></row></con:configuration>
                    </con:dataSource>
                    <con:property>cityName</con:property>
                    <con:restartOnRun>true</con:restartOnRun>
                </con:config>
            </con:testStep>
            <con:testStep type="restrequest" name="Geocode search" id="41facf24-255d-4225-af4b-e86aa805bfd8">
                <con:settings/>
                <con:config service="Google Maps" resourcePath="/maps/api/geocode/xml" methodName="Search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <con:restRequest name="Geocode search" mediaType="application/json" id="2e1df8cb-1dbc-4e6b-b90d-a7b0decda7c1">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                        </con:settings>
                        <con:endpoint>http://localhost:8089</con:endpoint>
                        <con:request/>
                        <con:originalUri>http://maps.googleapis.com/maps/api/geocode/xml</con:originalUri>
                        <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="7adb83d0-bd06-4484-b12a-2814b005065b">
                            <con:settings/><con:configuration>
                                <codes>200</codes>
                            </con:configuration>
                        </con:assertion>
                        <con:credentials>
                            <con:authType>No Authorization</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:parameters>
                            <con:entry key="sensor" value="false"/>
                            <con:entry key="address" value="${DataSource#cityName}"/>
                        </con:parameters>
                        <con:parameterOrder>
                            <con:entry>address</con:entry>
                            <con:entry>sensor</con:entry>
                        </con:parameterOrder>
                    </con:restRequest>
                </con:config>
            </con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="7851b4c7-4879-4729-88b5-75671ee8f7c4">
                <con:settings/>
                <con:config>
                    <dataSourceStep>DataSource</dataSourceStep>
                    <targetStep>Geocode search</targetStep>
                </con:config>
            </con:testStep><con:loadTest id="37b5481f-5262-4976-9bba-b39d0a1f390a" name="Baseline Load Test (Geocoding)">
                <con:settings><con:setting id="HttpSettings@close-connections">false</con:setting><con:setting id="hasBeenConvertedToLoadUITest">true</con:setting></con:settings>
                <con:threadCount>3</con:threadCount>
                <con:startDelay>0</con:startDelay>
                <con:sampleInterval>250</con:sampleInterval>
                <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
                <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
                <con:historyLimit>-1</con:historyLimit>
                <con:testLimit>60</con:testLimit>
                <con:limitType>TIME</con:limitType>
                <con:loadStrategy>
                    <con:type>Simple</con:type>
                </con:loadStrategy>
                <con:assertion type="Step Status" name="Step Status"/>
                <con:maxAssertionErrors>100</con:maxAssertionErrors>
                <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
                <con:strategyInterval>500</con:strategyInterval>
                <con:reportParameters/>
            </con:loadTest>
            <con:properties/>
            <con:reportParameters/>
            <con:breakPoints>
                <con:testStepId>08b01eeb-4d4d-4a8b-a0b6-9aba678111ef</con:testStepId>
                <con:status>NONE</con:status>
                <con:properties/>
            </con:breakPoints>
        </con:testCase>
        <con:properties/>
        <con:reportParameters/>
    </con:testSuite>
    <con:restMockService id="0a213029-e11b-4a4b-8ecf-ddad3f24c10b" port="8089" path="/" host="localhost" name="Google Maps Virt"><con:settings/><con:properties/><con:constraints><con:congestion>0</con:congestion><con:inputBandwidth>-1</con:inputBandwidth><con:outputBandwidth>-1</con:outputBandwidth><con:maxThreadPoolCapacity>20</con:maxThreadPoolCapacity><con:coreThreadPoolCapacity>5</con:coreThreadPoolCapacity><con:virtError><con:start>0</con:start><con:endless>true</con:endless></con:virtError></con:constraints><con:headerValidator type="NONE"/><con:restMockAction name="/maps/api/geocode/xml" method="GET" resourcePath="/maps/api/geocode/xml" id="de31e4f0-3317-4b6b-b17e-1e5deedd471b"><con:settings/><con:defaultResponse>Response Ok</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchConfig/><con:dispatchPath>if( mockRequest.httpRequest.toString().contains("Beijing") )
{
   return "Response Beijing"
}
else if( mockRequest.httpRequest.toString().contains("Tokyo") )
{
    return "Response Tokyo"
}
else if( mockRequest.httpRequest.toString().contains("Moscow") )
{
    return "Response Moscow"
}
else if( mockRequest.httpRequest.toString().contains("Seoul") )
{
    return "Response Seoul"
}
else if( mockRequest.httpRequest.toString().contains("Jakarta") )
{
    return "Response Jakarta"
}
else 
{
	return "Response Ok"
}
</con:dispatchPath><con:response name="Response Ok" id="a990c945-95fd-4470-8745-a41b5efc8b78" httpResponseStatus="200" mediaType="application/xml" encoding="UTF-8" dataSource=""><con:settings/><con:script/><con:responseContent/></con:response><con:response name="Response Beijing" id="27cfbddf-7e96-4052-810b-42e6b76fb45d" httpResponseStatus="200" mediaType="application/xml" dataSource=""><con:settings/><con:responseContent><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<GeocodeResponse>
 <status>OK</status>
 <result>
  <type>locality</type>
  <type>political</type>
  <formatted_address>Beijing, Beijing, China</formatted_address>
  <address_component>
   <long_name>Beijing</long_name>
   <short_name>Beijing</short_name>
   <type>locality</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>Beijing</long_name>
   <short_name>Beijing</short_name>
   <type>administrative_area_level_1</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>China</long_name>
   <short_name>CN</short_name>
   <type>country</type>
   <type>political</type>
  </address_component>
  <geometry>
   <location>
    <lat>39.9042110</lat>
    <lng>116.4073950</lng>
   </location>
   <location_type>APPROXIMATE</location_type>
   <viewport>
    <southwest>
     <lat>39.6612714</lat>
     <lng>116.0119343</lng>
    </southwest>
    <northeast>
     <lat>40.2164962</lat>
     <lng>116.7829835</lng>
    </northeast>
   </viewport>
   <bounds>
    <southwest>
     <lat>39.4427581</lat>
     <lng>115.4234115</lng>
    </southwest>
    <northeast>
     <lat>41.0608158</lat>
     <lng>117.5146251</lng>
    </northeast>
   </bounds>
  </geometry>
 </result>
</GeocodeResponse>]]></con:responseContent></con:response><con:response name="Response Tokyo" id="771c09bf-1e35-4859-8469-8edecb816209" httpResponseStatus="200" dataSource=""><con:settings/><con:responseContent><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<GeocodeResponse>
 <status>OK</status>
 <result>
  <type>administrative_area_level_1</type>
  <type>political</type>
  <formatted_address>Tokyo, Japan</formatted_address>
  <address_component>
   <long_name>Tokyo</long_name>
   <short_name>Tokyo</short_name>
   <type>administrative_area_level_1</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>Japan</long_name>
   <short_name>JP</short_name>
   <type>country</type>
   <type>political</type>
  </address_component>
  <geometry>
   <location>
    <lat>35.6894875</lat>
    <lng>139.6917064</lng>
   </location>
   <location_type>APPROXIMATE</location_type>
   <viewport>
    <southwest>
     <lat>35.5288730</lat>
     <lng>139.5105740</lng>
    </southwest>
    <northeast>
     <lat>35.8178130</lat>
     <lng>139.9102020</lng>
    </northeast>
   </viewport>
   <bounds>
    <southwest>
     <lat>24.2242343</lat>
     <lng>138.9427579</lng>
    </southwest>
    <northeast>
     <lat>35.8986466</lat>
     <lng>153.9875216</lng>
    </northeast>
   </bounds>
  </geometry>
 </result>
</GeocodeResponse>]]></con:responseContent></con:response><con:response name="Response Moscow" id="44bfaee4-bb08-4409-9867-39d12cefd53e" httpResponseStatus="200" dataSource=""><con:settings/><con:responseContent><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<GeocodeResponse>
 <status>OK</status>
 <result>
  <type>locality</type>
  <type>political</type>
  <formatted_address>Moscow, Russia</formatted_address>
  <address_component>
   <long_name>Moscow</long_name>
   <short_name>Moscow</short_name>
   <type>locality</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>gorod Moskva</long_name>
   <short_name>g. Moskva</short_name>
   <type>administrative_area_level_2</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>Moscow</long_name>
   <short_name>Moscow</short_name>
   <type>administrative_area_level_1</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>Russia</long_name>
   <short_name>RU</short_name>
   <type>country</type>
   <type>political</type>
  </address_component>
  <geometry>
   <location>
    <lat>55.7558260</lat>
    <lng>37.6173000</lng>
   </location>
   <location_type>APPROXIMATE</location_type>
   <viewport>
    <southwest>
     <lat>55.4899270</lat>
     <lng>37.3193288</lng>
    </southwest>
    <northeast>
     <lat>56.0096570</lat>
     <lng>37.9456611</lng>
    </northeast>
   </viewport>
   <bounds>
    <southwest>
     <lat>55.4899270</lat>
     <lng>37.3193288</lng>
    </southwest>
    <northeast>
     <lat>56.0096570</lat>
     <lng>37.9456611</lng>
    </northeast>
   </bounds>
  </geometry>
 </result>
 <result>
  <type>locality</type>
  <type>political</type>
  <formatted_address>Moscow, ID, USA</formatted_address>
  <address_component>
   <long_name>Moscow</long_name>
   <short_name>Moscow</short_name>
   <type>locality</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>Latah County</long_name>
   <short_name>Latah County</short_name>
   <type>administrative_area_level_2</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>Idaho</long_name>
   <short_name>ID</short_name>
   <type>administrative_area_level_1</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>United States</long_name>
   <short_name>US</short_name>
   <type>country</type>
   <type>political</type>
  </address_component>
  <geometry>
   <location>
    <lat>46.7323875</lat>
    <lng>-117.0001651</lng>
   </location>
   <location_type>APPROXIMATE</location_type>
   <viewport>
    <southwest>
     <lat>46.7109121</lat>
     <lng>-117.0396979</lng>
    </southwest>
    <northeast>
     <lat>46.7588820</lat>
     <lng>-116.9620680</lng>
    </northeast>
   </viewport>
   <bounds>
    <southwest>
     <lat>46.7109121</lat>
     <lng>-117.0396979</lng>
    </southwest>
    <northeast>
     <lat>46.7588820</lat>
     <lng>-116.9620680</lng>
    </northeast>
   </bounds>
  </geometry>
 </result>
</GeocodeResponse>]]></con:responseContent></con:response><con:response name="Response Seoul" id="a84ce275-a180-486c-b820-82dc4ad248c5" httpResponseStatus="200" dataSource=""><con:settings/><con:responseContent><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<GeocodeResponse>
 <status>OK</status>
 <result>
  <type>locality</type>
  <type>political</type>
  <formatted_address>Seoul, South Korea</formatted_address>
  <address_component>
   <long_name>Seoul</long_name>
   <short_name>Seoul</short_name>
   <type>locality</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>South Korea</long_name>
   <short_name>KR</short_name>
   <type>country</type>
   <type>political</type>
  </address_component>
  <geometry>
   <location>
    <lat>37.5665350</lat>
    <lng>126.9779692</lng>
   </location>
   <location_type>APPROXIMATE</location_type>
   <viewport>
    <southwest>
     <lat>37.4346000</lat>
     <lng>126.7968000</lng>
    </southwest>
    <northeast>
     <lat>37.6956000</lat>
     <lng>127.1823000</lng>
    </northeast>
   </viewport>
   <bounds>
    <southwest>
     <lat>37.4259627</lat>
     <lng>126.7645827</lng>
    </southwest>
    <northeast>
     <lat>37.7017495</lat>
     <lng>127.1835900</lng>
    </northeast>
   </bounds>
  </geometry>
 </result>
</GeocodeResponse>]]></con:responseContent></con:response><con:response name="Response Jakarta" id="9d9cf99e-afdc-4d0d-9d6e-1f441bfb4f7a" httpResponseStatus="200" dataSource=""><con:settings/><con:responseContent><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<GeocodeResponse>
 <status>OK</status>
 <result>
  <type>colloquial_area</type>
  <type>locality</type>
  <type>political</type>
  <formatted_address>Jakarta, Special Capital Region of Jakarta, Indonesia</formatted_address>
  <address_component>
   <long_name>Jakarta</long_name>
   <short_name>Jakarta</short_name>
   <type>colloquial_area</type>
   <type>locality</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>Special Capital Region of Jakarta</long_name>
   <short_name>Special Capital Region of Jakarta</short_name>
   <type>administrative_area_level_1</type>
   <type>political</type>
  </address_component>
  <address_component>
   <long_name>Indonesia</long_name>
   <short_name>ID</short_name>
   <type>country</type>
   <type>political</type>
  </address_component>
  <geometry>
   <location>
    <lat>-6.2087634</lat>
    <lng>106.8455990</lng>
   </location>
   <location_type>APPROXIMATE</location_type>
   <viewport>
    <southwest>
     <lat>-6.3708331</lat>
     <lng>106.6862110</lng>
    </southwest>
    <northeast>
     <lat>-6.0886599</lat>
     <lng>106.9728250</lng>
    </northeast>
   </viewport>
   <bounds>
    <southwest>
     <lat>-6.3708331</lat>
     <lng>106.6862110</lng>
    </southwest>
    <northeast>
     <lat>-6.0886599</lat>
     <lng>106.9728250</lng>
    </northeast>
   </bounds>
  </geometry>
 </result>
</GeocodeResponse>]]></con:responseContent></con:response></con:restMockAction></con:restMockService><con:requirements/>
    <con:properties/>
    <con:wssContainer/>
    <con:databaseConnectionContainer/>
    <con:oAuth2ProfileContainer/>
    <con:reporting>
        <con:reportTemplates/>
        <con:reportTemplates/>
        <con:xmlTemplates/>
        <con:xmlTemplates/>
        <con:parameters/>
        <con:parameters/>
    </con:reporting>
    <con:reporting/>
    <con:sensitiveInformation/>
<con:authRepository/><con:loadUiTest name="Baseline Load Test (Geocoding)" id="fb7dd8c2-c706-4dce-9d59-4cb15087b4cb"><con:settings><con:setting id="convertedFromLoadTestModelItemId">37b5481f-5262-4976-9bba-b39d0a1f390a</con:setting></con:settings><con1:loadui-project id="177d63aa-da34-40b2-9c1b-bfd1ae5e6e14" label="Baseline Load Test (Geocoding)" xmlns:con1="http://eviware.com/loadui/config"><con1:properties><con1:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con1:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="ModelItem.saveReport" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="ModelItem.reportFolder" type="java.lang.String"/><con1:property propagates="true" key="ModelItem.reportFormat" type="java.lang.String"/><con1:property propagates="true" key="ModelItem.remoteMode" type="java.lang.String"/></con1:properties><con1:attributes><con1:property key="limits">Time=60;</con1:property></con1:attributes><con1:addons/><con1:scene label="DefaultLoadUITest" id="4b5d33f9-f1d9-4e4d-900b-8460937e67e7" version="10"><con1:properties><con1:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con1:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="SceneItem.followProject" type="java.lang.Boolean">true</con1:property></con1:properties><con1:attributes><con1:property key="limits">Time=60;</con1:property></con1:attributes><con1:addons/><con1:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="Ready API TestCase Runner 1" id="e213f837-977c-497b-bc2b-529d581cfa2a" category="Runners"><con1:properties><con1:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con1:property propagates="true" key="concurrentSamples" type="java.lang.Long">1000</con1:property><con1:property propagates="true" key="property_name_is_not_relevant_for_private_property" type="java.lang.Long">9223372036854775807</con1:property><con1:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con1:property><con1:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con1:property propagates="true" key="_thinkTime" type="java.lang.Long">0</con1:property><con1:property propagates="true" key="ReadyApiTestCase" type="com.eviware.soapui.impl.wsdl.testcase.WsdlTestCase">13fd4c87-d2d0-4b4f-a7f4-629c290cd19a</con1:property><con1:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con1:property><con1:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con1:property><con1:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con1:property><con1:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con1:property></con1:properties><con1:attributes><con1:property key="com.eviware.loadui.api.model.ComponentItem@type">Ready API TestCase Runner</con1:property></con1:attributes><con1:addons/></con1:component><con1:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Load 1" id="f7518b1a-65c2-428e-b9fd-2f68e2616ff8" category="generators"><con1:properties><con1:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con1:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2014 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Simulates a "classic" fixed load situation
 *
 * @id com.eviware.FixedLoad
 * @help http://www.loadui.org/Generators/fixed-load-component.html
 * @name Fixed Load
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.Future
import java.util.concurrent.TimeUnit
import java.util.concurrent.atomic.AtomicInteger

sampleCount = createInput('Sample Count', 'Currently running feedback', 'Used to receive the number of currently running requests from the triggered Runner.') {
    it.name == "runningTerminal"
}

String latestAction = 'NONE'
AtomicInteger differenceFromTargetLoad = new AtomicInteger(0)
AtomicInteger currentVus = new AtomicInteger(0)
Future loadUpdateFuture = null

//Properties
createProperty('load', Long, 10) { value, prevValue ->
    if (latestAction == 'START') {
        differenceFromTargetLoad.set((value - (prevValue ?: 0)).intValue())
        if (!prevValue) {
            startup()
        }
    }
}
createProperty('interval', Long, 0)

calculateLoad = {
    load.value
}

startup = {
    loadUpdateFuture?.cancel(true)
    final startTime = System.currentTimeMillis()
    loadUpdateFuture = scheduleAtFixedRate({
        long expiredTime = System.currentTimeMillis() - startTime
        int targetLoad = calculateLoad(expiredTime) as int

        synchronized (differenceFromTargetLoad) {
            differenceFromTargetLoad.set(targetLoad - currentVus.get())

            // get VUs started again in cases where the load had been 0
            if (currentVus.get() == 0 &amp;&amp; differenceFromTargetLoad.get() > 0) {
                addVusToCorrectLoad()
            }
        }

    }, 0L, 250L, TimeUnit.MILLISECONDS)

    addVusToCorrectLoad()
}

startVu = {
    if (latestAction == 'START') {
        currentVus.incrementAndGet()
        def delay = Math.max(interval.value, 0)
        trigger(delay ?: null)
    }
}

addVusToCorrectLoad = {
    synchronized (differenceFromTargetLoad) {
        if (differenceFromTargetLoad.get() > 0) {
            differenceFromTargetLoad.times { startVu() }
            differenceFromTargetLoad.set(0)
        }
    }
}

onMessage = { outgoing, incoming, message ->
    currentVus.decrementAndGet() // got a returning VU, so we need to decrease the VU count
    boolean removeVU = false
    synchronized (differenceFromTargetLoad) {
        if (differenceFromTargetLoad.get() &lt; 0) {
            removeVU = true
            differenceFromTargetLoad.incrementAndGet()
        } else {
            addVusToCorrectLoad()
        }
    }

    if (!removeVU) {
        startVu()
    }
}

onAction('START') {
    if (latestAction == 'START') {
        return
    }
    currentVus.set(0)
    differenceFromTargetLoad.set(load.value.intValue())
    latestAction = 'START'
    startup()
}

onAction('STOP') {
    loadUpdateFuture?.cancel(true)
    loadUpdateFuture = null
    currentVus.set(0)
    latestAction = 'STOP'
}
</con1:property><con1:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con1:property><con1:property propagates="true" key="load" type="java.lang.Long">3</con1:property><con1:property propagates="true" key="interval" type="java.lang.Long">1000</con1:property></con1:properties><con1:attributes><con1:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Load</con1:property><con1:property key="_digest">1192e3c1b82d23fad14aac21bf27cd12</con1:property><con1:property key="_id">com.eviware.FixedLoad</con1:property><con1:property key="_classLoader">com.eviware.FixedLoad</con1:property></con1:attributes><con1:addons/></con1:component><con1:connection outputTerminalId="f7518b1a-65c2-428e-b9fd-2f68e2616ff8/triggerTerminal" inputTerminalId="e213f837-977c-497b-bc2b-529d581cfa2a/triggerTerminal"/><con1:connection outputTerminalId="e213f837-977c-497b-bc2b-529d581cfa2a/runningTerminal" inputTerminalId="f7518b1a-65c2-428e-b9fd-2f68e2616ff8/Sample Count"/></con1:scene><con1:statistics><con1:page title="DefaultLoadUIStatisticPage"><con1:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="" groupType="Monitors"><con1:attributes/></con1:chartGroup></con1:page></con1:statistics></con1:loadui-project><con:loadUITestScenario projectId="177d63aa-da34-40b2-9c1b-bfd1ae5e6e14" scenarioId="4b5d33f9-f1d9-4e4d-900b-8460937e67e7" name="DefaultLoadUITest" id="c3fb6d17-e58b-479a-aa23-c3718b7d9447"><con:settings/></con:loadUITestScenario></con:loadUiTest></con:soapui-project>